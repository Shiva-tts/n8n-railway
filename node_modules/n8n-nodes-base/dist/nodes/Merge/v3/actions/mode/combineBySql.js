"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = exports.properties = void 0;
exports.execute = execute;
const alasql_1 = __importDefault(require("alasql"));
const n8n_workflow_1 = require("n8n-workflow");
const utilities_1 = require("../../../../../utils/utilities");
const descriptions_1 = require("../../helpers/descriptions");
exports.properties = [
    descriptions_1.numberInputsProperty,
    {
        displayName: 'Query',
        name: 'query',
        type: 'string',
        default: 'SELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id',
        noDataExpression: true,
        description: 'Input data available as tables with corresponding number, e.g. input1, input2',
        hint: 'Supports <a href="https://github.com/alasql/alasql/wiki/Supported-SQL-statements" target="_blank">most</a> of the SQL-99 language',
        required: true,
        typeOptions: {
            rows: 5,
            editor: 'sqlEditor',
        },
    },
];
const displayOptions = {
    show: {
        mode: ['combineBySql'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, exports.properties);
async function execute(inputsData) {
    const nodeId = this.getNode().id;
    const returnData = [];
    const pairedItem = [];
    const db = new alasql_1.default.Database(nodeId);
    try {
        for (let i = 0; i < inputsData.length; i++) {
            const inputData = inputsData[i];
            inputData.forEach((item, index) => {
                if (item.pairedItem === undefined) {
                    item.pairedItem = index;
                }
                if (typeof item.pairedItem === 'number') {
                    pairedItem.push({
                        item: item.pairedItem,
                        input: i,
                    });
                    return;
                }
                if (Array.isArray(item.pairedItem)) {
                    const pairedItems = item.pairedItem
                        .filter((p) => p !== undefined)
                        .map((p) => (typeof p === 'number' ? { item: p } : p))
                        .map((p) => {
                        return {
                            item: p.item,
                            input: i,
                        };
                    });
                    pairedItem.push(...pairedItems);
                    return;
                }
                pairedItem.push({
                    item: item.pairedItem.item,
                    input: i,
                });
            });
            db.exec(`CREATE TABLE input${i + 1}`);
            db.tables[`input${i + 1}`].data = inputData.map((entry) => entry.json);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
            message: 'Issue while creating table from',
            description: error.message,
            itemIndex: 0,
        });
    }
    try {
        let query = this.getNodeParameter('query', 0);
        for (const resolvable of (0, utilities_1.getResolvables)(query)) {
            query = query.replace(resolvable, this.evaluateExpression(resolvable, 0));
        }
        const result = db.exec(query);
        for (const item of result) {
            if (Array.isArray(item)) {
                returnData.push(...item.map((json) => ({ json, pairedItem })));
            }
            else if (typeof item === 'object') {
                returnData.push({ json: item, pairedItem });
            }
        }
        if (!returnData.length) {
            returnData.push({ json: { success: true }, pairedItem });
        }
    }
    catch (error) {
        let message = '';
        if (typeof error === 'string') {
            message = error;
        }
        else {
            message = error.message;
        }
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
            message: 'Issue while executing query',
            description: message,
            itemIndex: 0,
        });
    }
    delete alasql_1.default.databases[nodeId];
    return [returnData];
}
//# sourceMappingURL=combineBySql.js.map