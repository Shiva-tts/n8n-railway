"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = exports.formFieldsProperties = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const common_descriptions_1 = require("../Form/common.descriptions");
const utils_1 = require("../Form/utils");
exports.formFieldsProperties = [
    {
        displayName: 'Define Form',
        name: 'defineForm',
        type: 'options',
        noDataExpression: true,
        options: [
            {
                name: 'Using Fields Below',
                value: 'fields',
            },
            {
                name: 'Using JSON',
                value: 'json',
            },
        ],
        default: 'fields',
    },
    {
        displayName: 'Form Fields',
        name: 'jsonOutput',
        type: 'json',
        typeOptions: {
            rows: 5,
        },
        default: '[\n   {\n      "fieldLabel":"Name",\n      "placeholder":"enter you name",\n      "requiredField":true\n   },\n   {\n      "fieldLabel":"Age",\n      "fieldType":"number",\n      "placeholder":"enter your age"\n   },\n   {\n      "fieldLabel":"Email",\n      "fieldType":"email",\n      "requiredField":true\n   }\n]',
        validateType: 'form-fields',
        ignoreValidationDuringExecution: true,
        hint: '<a href="hhttps://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/" target="_blank">See docs</a> for field syntax',
        displayOptions: {
            show: {
                defineForm: ['json'],
            },
        },
    },
    { ...common_descriptions_1.formFields, displayOptions: { show: { defineForm: ['fields'] } } },
];
const pageProperties = (0, n8n_workflow_1.updateDisplayOptions)({
    show: {
        operation: ['page'],
    },
}, [
    ...exports.formFieldsProperties,
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add option',
        default: {},
        options: [
            { ...common_descriptions_1.formTitle, required: false },
            common_descriptions_1.formDescription,
            {
                displayName: 'Button Label',
                name: 'buttonLabel',
                type: 'string',
                default: 'Submit',
            },
        ],
    },
]);
const completionProperties = (0, n8n_workflow_1.updateDisplayOptions)({
    show: {
        operation: ['completion'],
    },
}, [
    {
        displayName: 'On n8n Form Submission',
        name: 'respondWith',
        type: 'options',
        default: 'text',
        options: [
            {
                name: 'Show Completion Screen',
                value: 'text',
                description: 'Show a response text to the user',
            },
            {
                name: 'Redirect to URL',
                value: 'redirect',
                description: 'Redirect the user to a URL',
            },
        ],
    },
    {
        displayName: 'URL',
        name: 'redirectUrl',
        validateType: 'url',
        type: 'string',
        default: '',
        required: true,
        displayOptions: {
            show: {
                respondWith: ['redirect'],
            },
        },
    },
    {
        displayName: 'Completion Title',
        name: 'completionTitle',
        type: 'string',
        default: '',
        required: true,
        displayOptions: {
            show: {
                respondWith: ['text'],
            },
        },
    },
    {
        displayName: 'Completion Message',
        name: 'completionMessage',
        type: 'string',
        default: '',
        typeOptions: {
            rows: 2,
        },
        displayOptions: {
            show: {
                respondWith: ['text'],
            },
        },
    },
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add option',
        default: {},
        options: [{ ...common_descriptions_1.formTitle, required: false, displayName: 'Completion Page Title' }],
        displayOptions: {
            show: {
                respondWith: ['text'],
            },
        },
    },
]);
class Form extends n8n_workflow_1.Node {
    constructor() {
        super(...arguments);
        this.nodeInputData = [];
        this.description = {
            displayName: 'n8n Form',
            name: 'form',
            icon: 'file:form.svg',
            group: ['input'],
            version: 1,
            description: 'Generate webforms in n8n and pass their responses to the workflow',
            defaults: {
                name: 'Form',
            },
            inputs: ["main"],
            outputs: ["main"],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'GET',
                    responseMode: 'onReceived',
                    path: '',
                    restartWebhook: true,
                    isFullPath: true,
                    isForm: true,
                },
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: '',
                    restartWebhook: true,
                    isFullPath: true,
                    isForm: true,
                },
            ],
            properties: [
                {
                    displayName: 'An n8n Form Trigger node must be set up before this node',
                    name: 'triggerNotice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Page Type',
                    name: 'operation',
                    type: 'options',
                    default: 'page',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Next Form Page',
                            value: 'page',
                        },
                        {
                            name: 'Form Ending',
                            value: 'completion',
                        },
                    ],
                },
                ...pageProperties,
                ...completionProperties,
            ],
        };
    }
    async webhook(context) {
        const res = context.getResponseObject();
        const operation = context.getNodeParameter('operation', '');
        const parentNodes = context.getParentNodes(context.getNode().name);
        const trigger = parentNodes.find((node) => node.type === 'n8n-nodes-base.formTrigger');
        const mode = context.evaluateExpression(`{{ $('${trigger?.name}').first().json.formMode }}`);
        const defineForm = context.getNodeParameter('defineForm', false);
        let fields = [];
        if (defineForm === 'json') {
            try {
                const jsonOutput = context.getNodeParameter('jsonOutput', '', {
                    rawExpressions: true,
                });
                fields = (0, n8n_workflow_1.tryToParseJsonToFormFields)((0, utils_1.resolveRawData)(context, jsonOutput));
            }
            catch (error) {
                throw new n8n_workflow_1.NodeOperationError(context.getNode(), error.message, {
                    description: error.message,
                    type: mode === 'test' ? 'manual-form-test' : undefined,
                });
            }
        }
        else {
            fields = context.getNodeParameter('formFields.values', []);
        }
        const method = context.getRequestObject().method;
        if (operation === 'completion' && method === 'GET') {
            const completionTitle = context.getNodeParameter('completionTitle', '');
            const completionMessage = context.getNodeParameter('completionMessage', '');
            const redirectUrl = context.getNodeParameter('redirectUrl', '');
            const options = context.getNodeParameter('options', {});
            if (redirectUrl) {
                res.send(`<html><head><meta http-equiv="refresh" content="0; url=${redirectUrl}"></head></html>`);
                return { noWebhookResponse: true };
            }
            let title = options.formTitle;
            if (!title) {
                title = context.evaluateExpression(`{{ $('${trigger?.name}').params.formTitle }}`);
            }
            const appendAttribution = context.evaluateExpression(`{{ $('${trigger?.name}').params.options?.appendAttribution === false ? false : true }}`);
            res.render('form-trigger-completion', {
                title: completionTitle,
                message: completionMessage,
                formTitle: title,
                appendAttribution,
            });
            return { noWebhookResponse: true };
        }
        if (operation === 'completion' && method === 'POST') {
            return {
                workflowData: [context.evaluateExpression('{{ $input.all() }}')],
            };
        }
        if (method === 'GET') {
            const options = context.getNodeParameter('options', {});
            let title = options.formTitle;
            if (!title) {
                title = context.evaluateExpression(`{{ $('${trigger?.name}').params.formTitle }}`);
            }
            let description = options.formDescription;
            if (!description) {
                description = context.evaluateExpression(`{{ $('${trigger?.name}').params.formDescription }}`);
            }
            let buttonLabel = options.buttonLabel;
            if (!buttonLabel) {
                buttonLabel =
                    context.evaluateExpression(`{{ $('${trigger?.name}').params.options?.buttonLabel }}`) || 'Submit';
            }
            const responseMode = 'onReceived';
            let redirectUrl;
            const connectedNodes = context.getChildNodes(context.getNode().name);
            const hasNextPage = connectedNodes.some((node) => !node.disabled && (node.type === n8n_workflow_1.FORM_NODE_TYPE || node.type === n8n_workflow_1.WAIT_NODE_TYPE));
            if (hasNextPage) {
                redirectUrl = context.evaluateExpression('{{ $execution.resumeFormUrl }}');
            }
            const appendAttribution = context.evaluateExpression(`{{ $('${trigger?.name}').params.options?.appendAttribution === false ? false : true }}`);
            (0, utils_1.renderForm)({
                context,
                res,
                formTitle: title,
                formDescription: description,
                formFields: fields,
                responseMode,
                mode,
                redirectUrl,
                appendAttribution,
                buttonLabel,
            });
            return {
                noWebhookResponse: true,
            };
        }
        let useWorkflowTimezone = context.evaluateExpression(`{{ $('${trigger?.name}').params.options?.useWorkflowTimezone }}`);
        if (useWorkflowTimezone === undefined && trigger?.typeVersion > 2) {
            useWorkflowTimezone = true;
        }
        const returnItem = await (0, utils_1.prepareFormReturnItem)(context, fields, mode, useWorkflowTimezone);
        return {
            webhookResponse: { status: 200 },
            workflowData: [[returnItem]],
        };
    }
    async execute(context) {
        const operation = context.getNodeParameter('operation', 0);
        if (operation === 'completion') {
            this.nodeInputData = context.getInputData();
        }
        const parentNodes = context.getParentNodes(context.getNode().name);
        const hasFormTrigger = parentNodes.some((node) => node.type === n8n_workflow_1.FORM_TRIGGER_NODE_TYPE);
        if (!hasFormTrigger) {
            throw new n8n_workflow_1.NodeOperationError(context.getNode(), 'Form Trigger node must be set before this node');
        }
        const childNodes = context.getChildNodes(context.getNode().name);
        const hasNextPage = childNodes.some((node) => node.type === n8n_workflow_1.FORM_NODE_TYPE);
        if (operation === 'completion' && hasNextPage) {
            throw new n8n_workflow_1.NodeOperationError(context.getNode(), 'Completion has to be the last Form node in the workflow');
        }
        await context.putExecutionToWait(n8n_workflow_1.WAIT_INDEFINITELY);
        return [context.getInputData()];
    }
}
exports.Form = Form;
//# sourceMappingURL=Form.node.js.map