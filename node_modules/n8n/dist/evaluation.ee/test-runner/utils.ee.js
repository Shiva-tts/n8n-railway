"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPinData = createPinData;
exports.getPastExecutionTriggerNode = getPastExecutionTriggerNode;
const assert_1 = __importDefault(require("assert"));
function createPinData(workflow, mockedNodes, executionData, pastWorkflowData) {
    const pinData = {};
    const workflowNodeIds = new Map(workflow.nodes.map((node) => [node.id, node.name]));
    const pastWorkflowNodeIds = new Map();
    if (pastWorkflowData) {
        for (const node of pastWorkflowData.nodes) {
            pastWorkflowNodeIds.set(node.id, node.name);
        }
    }
    for (const mockedNode of mockedNodes) {
        (0, assert_1.default)(mockedNode.id, 'Mocked node ID is missing');
        const nodeName = workflowNodeIds.get(mockedNode.id);
        if (nodeName) {
            const pastNodeName = pastWorkflowNodeIds.get(mockedNode.id) ?? nodeName;
            const nodeData = executionData.resultData.runData[pastNodeName];
            if (nodeData?.[0]?.data?.main?.[0]) {
                pinData[nodeName] = nodeData[0]?.data?.main?.[0];
            }
        }
    }
    return pinData;
}
function getPastExecutionTriggerNode(executionData) {
    return Object.keys(executionData.resultData.runData).find((nodeName) => {
        const data = executionData.resultData.runData[nodeName];
        return !data[0].source || data[0].source.length === 0 || data[0].source[0] === null;
    });
}
//# sourceMappingURL=utils.ee.js.map