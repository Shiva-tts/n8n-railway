import { ErrorReporter, Logger } from 'n8n-core';
import { ActiveExecutions } from '../../active-executions';
import type { TestDefinition } from '../../databases/entities/test-definition.ee';
import type { TestRun } from '../../databases/entities/test-run.ee';
import type { User } from '../../databases/entities/user';
import { ExecutionRepository } from '../../databases/repositories/execution.repository';
import { TestMetricRepository } from '../../databases/repositories/test-metric.repository.ee';
import { TestRunRepository } from '../../databases/repositories/test-run.repository.ee';
import { WorkflowRepository } from '../../databases/repositories/workflow.repository';
import { NodeTypes } from '../../node-types';
import { WorkflowRunner } from '../../workflow-runner';
export declare class TestRunnerService {
    private readonly logger;
    private readonly workflowRepository;
    private readonly workflowRunner;
    private readonly executionRepository;
    private readonly activeExecutions;
    private readonly testRunRepository;
    private readonly testMetricRepository;
    private readonly nodeTypes;
    private readonly errorReporter;
    private abortControllers;
    constructor(logger: Logger, workflowRepository: WorkflowRepository, workflowRunner: WorkflowRunner, executionRepository: ExecutionRepository, activeExecutions: ActiveExecutions, testRunRepository: TestRunRepository, testMetricRepository: TestMetricRepository, nodeTypes: NodeTypes, errorReporter: ErrorReporter);
    private getStartNodesData;
    private runTestCase;
    private runTestCaseEvaluation;
    private extractEvaluationResult;
    private getTestMetricNames;
    runTest(user: User, test: TestDefinition): Promise<void>;
    canBeCancelled(testRun: TestRun): boolean;
    cancelTestRun(testRunId: string): Promise<void>;
}
