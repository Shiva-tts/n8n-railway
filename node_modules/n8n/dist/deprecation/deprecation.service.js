"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeprecationService = void 0;
const di_1 = require("@n8n/di");
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const SAFE_TO_REMOVE = 'Remove this environment variable; it is no longer needed.';
let DeprecationService = class DeprecationService {
    constructor(logger) {
        this.logger = logger;
        this.deprecations = [
            { envVar: 'N8N_BINARY_DATA_TTL', message: SAFE_TO_REMOVE },
            { envVar: 'N8N_PERSISTED_BINARY_DATA_TTL', message: SAFE_TO_REMOVE },
            { envVar: 'EXECUTIONS_DATA_PRUNE_TIMEOUT', message: SAFE_TO_REMOVE },
            {
                envVar: 'N8N_BINARY_DATA_MODE',
                message: '`default` is deprecated. Please switch to `filesystem` mode.',
                checkValue: (value) => value === 'default',
            },
            { envVar: 'N8N_CONFIG_FILES', message: 'Please use .env files or *_FILE env vars instead.' },
            {
                envVar: 'DB_TYPE',
                message: 'MySQL and MariaDB are deprecated. Please migrate to PostgreSQL.',
                checkValue: (value) => ['mysqldb', 'mariadb'].includes(value),
            },
            {
                envVar: 'N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN',
                message: `n8n no longer deregisters webhooks at startup and shutdown. ${SAFE_TO_REMOVE}`,
            },
        ];
        this.state = {};
    }
    warn() {
        this.deprecations.forEach((d) => {
            const envValue = process.env[d.envVar];
            this.state[d.envVar] = {
                inUse: d.checkValue
                    ? envValue !== undefined && d.checkValue(envValue)
                    : envValue !== undefined,
            };
        });
        const inUse = Object.entries(this.state)
            .filter(([, d]) => d.inUse)
            .map(([envVar]) => {
            const deprecation = this.deprecations.find((d) => d.envVar === envVar);
            if (!deprecation) {
                throw new n8n_workflow_1.ApplicationError(`Deprecation not found for env var: ${envVar}`);
            }
            return deprecation;
        });
        if (inUse.length === 0)
            return;
        const header = `The following environment variable${inUse.length === 1 ? ' is' : 's are'} deprecated and will be removed in an upcoming version of n8n. Please take the recommended actions to update your configuration`;
        const deprecations = inUse
            .map(({ envVar, message }) => ` - ${envVar} -> ${message}\n`)
            .join('');
        this.logger.warn(`\n${header}:\n${deprecations}`);
    }
    isInUse(envVar) {
        return this.state[envVar]?.inUse ?? false;
    }
};
exports.DeprecationService = DeprecationService;
exports.DeprecationService = DeprecationService = __decorate([
    (0, di_1.Service)(),
    __metadata("design:paramtypes", [n8n_core_1.Logger])
], DeprecationService);
//# sourceMappingURL=deprecation.service.js.map