"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunRepository = void 0;
const di_1 = require("@n8n/di");
const typeorm_1 = require("@n8n/typeorm");
const test_run_ee_1 = require("../../databases/entities/test-run.ee");
let TestRunRepository = class TestRunRepository extends typeorm_1.Repository {
    constructor(dataSource) {
        super(test_run_ee_1.TestRun, dataSource.manager);
    }
    async createTestRun(testDefinitionId) {
        const testRun = this.create({
            status: 'new',
            testDefinition: { id: testDefinitionId },
        });
        return await this.save(testRun);
    }
    async markAsRunning(id, totalCases) {
        return await this.update(id, {
            status: 'running',
            runAt: new Date(),
            totalCases,
            passedCases: 0,
            failedCases: 0,
        });
    }
    async markAsCompleted(id, metrics) {
        return await this.update(id, { status: 'completed', completedAt: new Date(), metrics });
    }
    async markAsCancelled(id) {
        return await this.update(id, { status: 'cancelled' });
    }
    async incrementPassed(id) {
        return await this.increment({ id }, 'passedCases', 1);
    }
    async incrementFailed(id) {
        return await this.increment({ id }, 'failedCases', 1);
    }
    async getMany(testDefinitionId, options) {
        const findManyOptions = {
            where: { testDefinition: { id: testDefinitionId } },
            order: { createdAt: 'DESC' },
        };
        if (options?.take) {
            findManyOptions.skip = options.skip;
            findManyOptions.take = options.take;
        }
        return await this.find(findManyOptions);
    }
};
exports.TestRunRepository = TestRunRepository;
exports.TestRunRepository = TestRunRepository = __decorate([
    (0, di_1.Service)(),
    __metadata("design:paramtypes", [typeorm_1.DataSource])
], TestRunRepository);
//# sourceMappingURL=test-run.repository.ee.js.map