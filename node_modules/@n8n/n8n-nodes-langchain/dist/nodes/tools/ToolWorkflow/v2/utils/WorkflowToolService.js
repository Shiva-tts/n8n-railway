"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowToolService = void 0;
const tools_1 = require("@langchain/core/tools");
const get_1 = __importDefault(require("lodash/get"));
const isObject_1 = __importDefault(require("lodash/isObject"));
const manual = __importStar(require("n8n-nodes-base/dist/nodes/Set/v2/manual.mode"));
const GenericFunctions_1 = require("n8n-nodes-base/dist/utils/workflowInputsResourceMapping/GenericFunctions");
const n8n_workflow_1 = require("n8n-workflow");
const zod_1 = require("zod");
const FromAIParser_1 = require("./FromAIParser");
class WorkflowToolService {
    constructor(context) {
        this.context = context;
        const subWorkflowInputs = this.context.getNode().parameters
            .workflowInputs;
        this.useSchema = (subWorkflowInputs?.schema ?? []).length > 0;
    }
    async createTool({ name, description, itemIndex, }) {
        const toolHandler = async (query, runManager) => {
            const { index } = this.context.addInputData("ai_tool", [
                [{ json: { query } }],
            ]);
            try {
                const response = await this.runFunction(query, itemIndex, runManager);
                const processedResponse = this.handleToolResponse(response);
                let metadata;
                if (this.subExecutionId && this.subWorkflowId) {
                    metadata = {
                        subExecution: {
                            executionId: this.subExecutionId,
                            workflowId: this.subWorkflowId,
                        },
                    };
                }
                const json = (0, n8n_workflow_1.jsonParse)(processedResponse, {
                    fallbackValue: { response: processedResponse },
                });
                void this.context.addOutputData("ai_tool", index, [[{ json }]], metadata);
                return processedResponse;
            }
            catch (error) {
                const executionError = error;
                const errorResponse = `There was an error: "${executionError.message}"`;
                void this.context.addOutputData("ai_tool", index, executionError);
                return errorResponse;
            }
            finally {
                this.context.runIndex++;
            }
        };
        return this.useSchema
            ? await this.createStructuredTool(name, description, toolHandler)
            : new tools_1.DynamicTool({ name, description, func: toolHandler });
    }
    handleToolResponse(response) {
        if (typeof response === 'number') {
            return response.toString();
        }
        if ((0, isObject_1.default)(response)) {
            return JSON.stringify(response, null, 2);
        }
        if (typeof response !== 'string') {
            throw new n8n_workflow_1.NodeOperationError(this.context.getNode(), 'Wrong output type returned', {
                description: `The response property should be a string, but it is an ${typeof response}`,
            });
        }
        return response;
    }
    async executeSubWorkflow(workflowInfo, items, workflowProxy, runManager) {
        let receivedData;
        try {
            receivedData = await this.context.executeWorkflow(workflowInfo, items, runManager?.getChild(), {
                parentExecution: {
                    executionId: workflowProxy.$execution.id,
                    workflowId: workflowProxy.$workflow.id,
                },
            });
            this.subExecutionId = receivedData.executionId;
        }
        catch (error) {
            throw new n8n_workflow_1.NodeOperationError(this.context.getNode(), error);
        }
        const response = (0, get_1.default)(receivedData, 'data[0][0].json');
        if (response === undefined) {
            throw new n8n_workflow_1.NodeOperationError(this.context.getNode(), 'There was an error: "The workflow did not return a response"');
        }
        return { response, subExecutionId: receivedData.executionId };
    }
    async runFunction(query, itemIndex, runManager) {
        const source = this.context.getNodeParameter('source', itemIndex);
        const workflowProxy = this.context.getWorkflowDataProxy(0);
        const { workflowInfo } = await this.getSubWorkflowInfo(source, itemIndex, workflowProxy);
        const rawData = this.prepareRawData(query, itemIndex);
        const items = await this.prepareWorkflowItems(query, itemIndex, rawData);
        this.subWorkflowId = workflowInfo.id;
        const { response } = await this.executeSubWorkflow(workflowInfo, items, workflowProxy, runManager);
        return response;
    }
    async getSubWorkflowInfo(source, itemIndex, workflowProxy) {
        const workflowInfo = {};
        let subWorkflowId;
        if (source === 'database') {
            const { value } = this.context.getNodeParameter('workflowId', itemIndex, {});
            workflowInfo.id = value;
            subWorkflowId = workflowInfo.id;
        }
        else if (source === 'parameter') {
            const workflowJson = this.context.getNodeParameter('workflowJson', itemIndex);
            try {
                workflowInfo.code = JSON.parse(workflowJson);
                subWorkflowId = workflowProxy.$workflow.id;
            }
            catch (error) {
                throw new n8n_workflow_1.NodeOperationError(this.context.getNode(), `The provided workflow is not valid JSON: "${error.message}"`, { itemIndex });
            }
        }
        return { workflowInfo, subWorkflowId: subWorkflowId };
    }
    prepareRawData(query, itemIndex) {
        const rawData = { query };
        const workflowFieldsJson = this.context.getNodeParameter('fields.values', itemIndex, [], {
            rawExpressions: true,
        });
        for (const entry of workflowFieldsJson) {
            if (entry.type === 'objectValue' && entry.objectValue.startsWith('=')) {
                rawData[entry.name] = entry.objectValue.replace(/^=+/, '');
            }
        }
        return rawData;
    }
    async prepareWorkflowItems(query, itemIndex, rawData) {
        const options = { include: 'all' };
        let jsonData = typeof query === 'object' ? query : { query };
        if (this.useSchema) {
            const currentWorkflowInputs = GenericFunctions_1.getCurrentWorkflowInputData.call(this.context);
            jsonData = currentWorkflowInputs[itemIndex].json;
        }
        const newItem = await manual.execute.call(this.context, { json: jsonData }, itemIndex, options, rawData, this.context.getNode());
        return [newItem];
    }
    async createStructuredTool(name, description, func) {
        const fromAIParser = new FromAIParser_1.AIParametersParser(this.context);
        const collectedArguments = await this.extractFromAIParameters(fromAIParser);
        if (collectedArguments.length === 0) {
            return new tools_1.DynamicTool({ name, description, func });
        }
        const schema = this.createZodSchema(collectedArguments, fromAIParser);
        return new tools_1.DynamicStructuredTool({ schema, name, description, func });
    }
    async extractFromAIParameters(fromAIParser) {
        const collectedArguments = [];
        fromAIParser.traverseNodeParameters(this.context.getNode().parameters, collectedArguments);
        const uniqueArgsMap = new Map();
        for (const arg of collectedArguments) {
            uniqueArgsMap.set(arg.key, arg);
        }
        return Array.from(uniqueArgsMap.values());
    }
    createZodSchema(args, parser) {
        const schemaObj = args.reduce((acc, placeholder) => {
            acc[placeholder.key] = parser.generateZodSchema(placeholder);
            return acc;
        }, {});
        return zod_1.z.object(schemaObj).required();
    }
}
exports.WorkflowToolService = WorkflowToolService;
//# sourceMappingURL=WorkflowToolService.js.map