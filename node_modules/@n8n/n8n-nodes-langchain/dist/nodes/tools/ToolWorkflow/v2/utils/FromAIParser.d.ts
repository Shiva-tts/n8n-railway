import type { ISupplyDataFunctions } from 'n8n-workflow';
import { z } from 'zod';
type AllowedTypes = 'string' | 'number' | 'boolean' | 'json';
export interface FromAIArgument {
    key: string;
    description?: string;
    type?: AllowedTypes;
    defaultValue?: string | number | boolean | Record<string, unknown>;
}
export declare class AIParametersParser {
    private ctx;
    constructor(ctx: ISupplyDataFunctions);
    generateZodSchema(placeholder: FromAIArgument): z.ZodTypeAny;
    traverseNodeParameters(payload: unknown, collectedArgs: FromAIArgument[]): void;
    extractFromAICalls(str: string): FromAIArgument[];
    parseArguments(argsString: string): FromAIArgument;
    parseDefaultValue(value: string | undefined): string | number | boolean | Record<string, unknown> | undefined;
}
export {};
