import { S3Config } from '@n8n/config';
import type { AxiosResponse } from 'axios';
import type { Readable } from 'stream';
import { Logger } from '../../logging/logger';
import type { ListPage, MetadataResponseHeaders } from './types';
import type { BinaryData } from '../types';
export declare class ObjectStoreService {
    private readonly logger;
    private readonly s3Config;
    private baseUrl;
    private isReady;
    private isReadOnly;
    constructor(logger: Logger, s3Config: S3Config);
    init(): Promise<void>;
    setReadonly(newState: boolean): void;
    setReady(newState: boolean): void;
    checkConnection(): Promise<AxiosResponse<unknown, any> | undefined>;
    put(filename: string, buffer: Buffer, metadata?: BinaryData.PreWriteMetadata): Promise<AxiosResponse<any, any>>;
    get(fileId: string, { mode }: {
        mode: 'buffer';
    }): Promise<Buffer>;
    get(fileId: string, { mode }: {
        mode: 'stream';
    }): Promise<Readable>;
    getMetadata(fileId: string): Promise<MetadataResponseHeaders>;
    deleteOne(fileId: string): Promise<AxiosResponse<unknown, any>>;
    deleteMany(prefix: string): Promise<AxiosResponse<unknown, any> | undefined>;
    list(prefix: string): Promise<{
        key: string;
        lastModified: string;
        eTag: string;
        size: number;
        storageClass: string;
    }[]>;
    getListPage(prefix: string, nextPageToken?: string): Promise<ListPage>;
    private blockWrite;
    private request;
}
