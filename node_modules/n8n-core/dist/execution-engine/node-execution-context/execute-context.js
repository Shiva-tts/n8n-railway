"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteContext = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const node_execute_functions_1 = require("../../node-execute-functions");
const base_execute_context_1 = require("./base-execute-context");
const get_input_connection_data_1 = require("./utils/get-input-connection-data");
class ExecuteContext extends base_execute_context_1.BaseExecuteContext {
    constructor(workflow, node, additionalData, mode, runExecutionData, runIndex, connectionInputData, inputData, executeData, closeFunctions, abortSignal) {
        super(workflow, node, additionalData, mode, runExecutionData, runIndex, connectionInputData, inputData, executeData, abortSignal);
        this.closeFunctions = closeFunctions;
        this.helpers = {
            createDeferredPromise: n8n_workflow_1.createDeferredPromise,
            returnJsonArray: node_execute_functions_1.returnJsonArray,
            copyInputItems: node_execute_functions_1.copyInputItems,
            normalizeItems: node_execute_functions_1.normalizeItems,
            constructExecutionMetaData: node_execute_functions_1.constructExecutionMetaData,
            ...(0, node_execute_functions_1.getRequestHelperFunctions)(workflow, node, additionalData, runExecutionData, connectionInputData),
            ...(0, node_execute_functions_1.getBinaryHelperFunctions)(additionalData, workflow.id),
            ...(0, node_execute_functions_1.getSSHTunnelFunctions)(),
            ...(0, node_execute_functions_1.getFileSystemHelperFunctions)(node),
            ...(0, node_execute_functions_1.getCheckProcessedHelperFunctions)(workflow, node),
            assertBinaryData: (itemIndex, propertyName) => (0, node_execute_functions_1.assertBinaryData)(inputData, node, itemIndex, propertyName, 0),
            getBinaryDataBuffer: async (itemIndex, propertyName) => await (0, node_execute_functions_1.getBinaryDataBuffer)(inputData, itemIndex, propertyName, 0),
            detectBinaryEncoding: (buffer) => (0, node_execute_functions_1.detectBinaryEncoding)(buffer),
        };
        this.nodeHelpers = {
            copyBinaryFile: async (filePath, fileName, mimeType) => await (0, node_execute_functions_1.copyBinaryFile)(this.workflow.id, this.additionalData.executionId, filePath, fileName, mimeType),
        };
        this.getNodeParameter = ((parameterName, itemIndex, fallbackValue, options) => this._getNodeParameter(parameterName, itemIndex, fallbackValue, options));
    }
    async startJob(jobType, settings, itemIndex) {
        return await this.additionalData.startRunnerTask(this.additionalData, jobType, settings, this, this.inputData, this.node, this.workflow, this.runExecutionData, this.runIndex, itemIndex, this.node.name, this.connectionInputData, {}, this.mode, (0, n8n_workflow_1.createEnvProviderState)(), this.executeData);
    }
    async getInputConnectionData(connectionType, itemIndex) {
        return await get_input_connection_data_1.getInputConnectionData.call(this, this.workflow, this.runExecutionData, this.runIndex, this.connectionInputData, this.inputData, this.additionalData, this.executeData, this.mode, this.closeFunctions, connectionType, itemIndex, this.abortSignal);
    }
    getInputData(inputIndex = 0, connectionType = "main") {
        if (!this.inputData.hasOwnProperty(connectionType)) {
            return [];
        }
        return super.getInputItems(inputIndex, connectionType) ?? [];
    }
    logNodeOutput(...args) {
        if (this.mode === 'manual') {
            this.sendMessageToUI(...args);
            return;
        }
        if (process.env.CODE_ENABLE_STDOUT === 'true') {
            console.log(`[Workflow "${this.getWorkflow().id}"][Node "${this.node.name}"]`, ...args);
        }
    }
    async sendResponse(response) {
        await this.additionalData.hooks?.executeHookFunctions('sendResponse', [response]);
    }
    addInputData() {
        throw new n8n_workflow_1.ApplicationError('addInputData should not be called on IExecuteFunctions');
    }
    addOutputData() {
        throw new n8n_workflow_1.ApplicationError('addOutputData should not be called on IExecuteFunctions');
    }
    getParentCallbackManager() {
        return this.additionalData.parentCallbackManager;
    }
}
exports.ExecuteContext = ExecuteContext;
//# sourceMappingURL=execute-context.js.map